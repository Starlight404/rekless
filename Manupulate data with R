# R excell file

getwd()
#setwd----- custom directory
setwd("C:\\Users\\Rahul\\Desktop\\R lang\\import csv")

#installing xlsx package
install.packages("xlsx")


library("xlsx")
#structure--read.xlsx(file_name,sheet_index)


#reading the first worksheet in the file

#options(java.parameters = "-Xmx8000m")

excel_data<- read.xlsx("file_example_XLSX_5000.xlsx",sheetIndex = 1)
print(excel_data)

names(excel_data)
dim(excel_data)
summary(excel_data)

max_age<- max(excel_data$Age)
max_age
min_age<- min(excel_data$Age)
min_age

a<- subset(excel_data, Country == "France")

View(a)


#write.xlsx()

#Manupulate Data in R with dplyr package

test<- read.csv("1000 Records.csv")
View(test)
head(test)
tail(test)
summary(test)

install.packages("dplyr")
library("dplyr")

#important dlpyr verbs to remember

#select() ----    select coloumn
#filter() -----   filter rows
#arrange() ----- re-order or arrange rows
#mutate() ------ create new coloumns
#summarise() ---- summarise values

#group by() ----- allows for group operations in the "split-layer-combine
#concept

names(test)

salary<- select(test, First.Name, Salary)
salary

head(salary)
#to select all the columns except a specific column,
#use the "-" (subtraction) operator(also known as negative indexing)

test1<- select(test, -City)
head(select(test,-City))
#To select a range of columns by Name, use the ":"(colon ) operator
head(select(test, Emp.ID:Gender))

#to select all columns that start with chracter string"s"
head(select(test, starts_with("S")))




head(select(test, ends_with("Name")))

#some additional to select based on a specific criteria

#ends with()
#contains() select column that contain a character string
#matches() select column that match a regular expression
#one_of select column names that are from a group of names



#selecting the rows using filter()

names(test)

filter(test, Salary  >=190579, Weight.in.Kgs.>42, Age.in.Yrs.> 24.44 )
filter(test, Gender %in% c("F"))#if i have to filter the vectors

#pipe operator : %>%
#dplyr imports this operator from another package(magritr)
#this operator allows to pipe the output from one function to 
#the input of another function, instead of nesting functions 
#(creating from the inside to the outside)
#the idea of piping is to read the functions from left to right

install.packages("magrittr")
library(magrittr)
head(select(test, First.Name, Gender))

test %>% select(First.Name,Gender) %>% head

#Arrange or re-rder rows using arrange()
# to arrange rows by a particular column such as
#the first name ,list the name of the column i want ot 
#arrange the rows by
test %>% arrange(First.Name) %>%head
#we will select three columns from test, arrange the 
#rows by the firstname, salary, gender=
#finally show the head of the data frame


test %>%
  select(First.Name, Gender, Salary) %>%
  arrange( First.Name,Gender, Salary) %>%
  head
         
         
